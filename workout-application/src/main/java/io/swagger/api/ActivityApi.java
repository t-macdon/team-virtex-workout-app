/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.34).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Activity;
import io.swagger.model.Activitypropertiesid;
import io.swagger.model.Review;
import io.swagger.model.Segment;
import io.swagger.model.Segmentpropertiesid;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2022-07-30T20:31:30.649-04:00[America/New_York]")
@Validated
public interface ActivityApi {

    @Operation(summary = "Delete Activity", description = "Deletes an existing Activity object", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "204", description = "The specified resource was deleted successfully"),
        
        @ApiResponse(responseCode = "404", description = "One or more specified resources were not found") })
    @RequestMapping(value = "/activity/{activityId}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> activityActivityIdDelete(@Parameter(in = ParameterIn.PATH, description = "An id to uniquely locate an Activity", required=true, schema=@Schema()) @PathVariable("activityId") Activitypropertiesid activityId);


    @Operation(summary = "Get single Activity", description = "Find an existing Activity with the provided activityId", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "The found Activity object", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Activity.class))),
        
        @ApiResponse(responseCode = "404", description = "One or more specified resources were not found") })
    @RequestMapping(value = "/activity/{activityId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Activity> activityActivityIdGet(@Parameter(in = ParameterIn.PATH, description = "An id to uniquely locate an Activity", required=true, schema=@Schema()) @PathVariable("activityId") Activitypropertiesid activityId);


    @Operation(summary = "Get all Reviews posted on an Activity", description = "Gets a list of all known Reviews posted on an Activity", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "The set of all Reviews", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Review.class)))),
        
        @ApiResponse(responseCode = "404", description = "One or more specified resources were not found") })
    @RequestMapping(value = "/activity/{activityId}/reviews",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Review>> activityActivityIdReviewsGet(@Parameter(in = ParameterIn.PATH, description = "An id to uniquely locate an Activity", required=true, schema=@Schema()) @PathVariable("activityId") Activitypropertiesid activityId);


    @Operation(summary = "Create a new Segment object within an Activity", description = "Instantiate Segment object, populate it with data, and attach to Activity", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "The specified resource was created successfully"),
        
        @ApiResponse(responseCode = "404", description = "One or more specified resources were not found") })
    @RequestMapping(value = "/activity/{activityId}/segment",
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Void> activityActivityIdSegmentPost(@Parameter(in = ParameterIn.PATH, description = "An id to uniquely locate an Activity", required=true, schema=@Schema()) @PathVariable("activityId") Activitypropertiesid activityId, @Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody Segment body);


    @Operation(summary = "Update an existing Segment object", description = "Updates based on provided segmentId", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "The specified resource was updated successfully"),
        
        @ApiResponse(responseCode = "404", description = "One or more specified resources were not found") })
    @RequestMapping(value = "/activity/{activityId}/segment",
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Void> activityActivityIdSegmentPut(@Parameter(in = ParameterIn.PATH, description = "An id to uniquely locate an Activity", required=true, schema=@Schema()) @PathVariable("activityId") Activitypropertiesid activityId, @Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody Segment body);


    @Operation(summary = "Delete Segment within Activity", description = "Deletes an existing Segment object inside of an Activity", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "204", description = "The specified resource was deleted successfully"),
        
        @ApiResponse(responseCode = "404", description = "One or more specified resources were not found") })
    @RequestMapping(value = "/activity/{activityId}/segment/{segmentId}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> activityActivityIdSegmentSegmentIdDelete(@Parameter(in = ParameterIn.PATH, description = "An id to uniquely locate an Activity", required=true, schema=@Schema()) @PathVariable("activityId") Activitypropertiesid activityId, @Parameter(in = ParameterIn.PATH, description = "An id to uniquely locate a Segment", required=true, schema=@Schema()) @PathVariable("segmentId") Segmentpropertiesid segmentId);


    @Operation(summary = "Get single Segment", description = "Find an existing Segment with the provided segmentId", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "The found Segment object", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Segment.class))),
        
        @ApiResponse(responseCode = "404", description = "No Segment found with provided segmentId attached to Activity with provided activityId") })
    @RequestMapping(value = "/activity/{activityId}/segment/{segmentId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Segment> activityActivityIdSegmentSegmentIdGet(@Parameter(in = ParameterIn.PATH, description = "An id to uniquely locate an Activity", required=true, schema=@Schema()) @PathVariable("activityId") Activitypropertiesid activityId, @Parameter(in = ParameterIn.PATH, description = "An id to uniquely locate a Segment", required=true, schema=@Schema()) @PathVariable("segmentId") Segmentpropertiesid segmentId);


    @Operation(summary = "Create a new Activity object", description = "Instantiate Activity object and populate it with data", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "The specified resource was created successfully") })
    @RequestMapping(value = "/activity",
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Void> activityPost(@Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody Activity body);


    @Operation(summary = "Update an existing Activity object", description = "Updates based on provided activityId", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "The specified resource was updated successfully"),
        
        @ApiResponse(responseCode = "404", description = "One or more specified resources were not found") })
    @RequestMapping(value = "/activity",
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Void> activityPut(@Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody Activity body);

}

